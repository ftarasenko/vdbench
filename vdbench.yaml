heat_template_version: 2016-04-08
#
# you can deploy this template using the following command:
# 'openstack stack create -t example.yaml -e example-env.yaml <Stack Name>'
# 
# after successful stack creation you can log in with 
# ssh -l syseleven <externalIP> 
# 

description: Stack that launches a single server

parameters:
  public_network:
    type: string
    default: public1_net
  private_network:
    type: string
    constraints:
      - custom_constraint: neutron.network
    default: private1_net
  image:
    type: string
    default: ubuntu16
    constraints:
      - custom_constraint: glance.image
  flavor:
    type: string
    default: f1.vdbench
    constraints:
      - custom_constraint: nova.flavor
  key_name:
    type: string
    default: ftarasenko
  volume_size:
    type: number  
    default: 10

resources:

  host:
    type: OS::Nova::Server
    depends_on: [ cloud-init-config, port ]
    properties:
      name: 
        list_join: [ '-', [ { get_param: "OS::stack_name" }, 'vdbench' ]]
      user_data_format: RAW
      user_data: { get_resource: cloud-init-config }    
      image: { get_param: image } 
      flavor: { get_param: flavor } 
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: port }

  cloud-init-config:
   # cloud init resource
   type: OS::Heat::CloudConfig
   properties:
    cloud_config:
      manage_etc_hosts: true
      runcmd:
        - wget https://github.com/ftarasenko/vdbench/raw/master/vdbench50407.zip
        - wget https://raw.githubusercontent.com/ftarasenko/vdbench/master/workload10
        - unzip vdbench50407.zip
        - ./vdbench -f workload10 -o out
      packages:
        - default-jre-headless
        - unzip

  volume_1:
    type: OS::Cinder::Volume
    properties:
      name: 
        list_join: [ '_', [{ get_attr: [host, name] }, 'db']]
      size: { get_param: volume_size }

  volume_1_attachment:
    type: OS::Cinder::VolumeAttachment
    depends_on: [ volume_1, host ]
    properties:
      volume_id: { get_resource: volume_1 }
      instance_uuid: { get_resource: host }

  volume_2:
    type: OS::Cinder::Volume
    properties:
      name: 
        list_join: [ '_', [{ get_attr: [host, name] }, 'db']]
      size: { get_param: volume_size }

  volume_2_attachment:
    type: OS::Cinder::VolumeAttachment
    depends_on: [ volume_2, host ]
    properties:
      volume_id: { get_resource: volume_2 }
      instance_uuid: { get_resource: host }

  volume_3:
    type: OS::Cinder::Volume
    properties:
      name: 
        list_join: [ '_', [{ get_attr: [host, name] }, 'db']]
      size: { get_param: volume_size }

  volume_3_attachment:
    type: OS::Cinder::VolumeAttachment
    depends_on: [ volume_3, host ]
    properties:
      volume_id: { get_resource: volume_3 }
      instance_uuid: { get_resource: host }

  volume_4:
    type: OS::Cinder::Volume
    properties:
      name: 
        list_join: [ '_', [{ get_attr: [host, name] }, 'db']]
      size: { get_param: volume_size }

  volume_4_attachment:
    type: OS::Cinder::VolumeAttachment
    depends_on: [ volume_4, host ]
    properties:
      volume_id: { get_resource: volume_4 }
      instance_uuid: { get_resource: host }

  volume_5:
    type: OS::Cinder::Volume
    properties:
      name: 
        list_join: [ '_', [{ get_attr: [host, name] }, 'db']]
      size: { get_param: volume_size }

  volume_5_attachment:
    type: OS::Cinder::VolumeAttachment
    depends_on: [ volume_5, host ]
    properties:
      volume_id: { get_resource: volume_5 }
      instance_uuid: { get_resource: host }

  volume_6:
    type: OS::Cinder::Volume
    properties:
      name: 
        list_join: [ '_', [{ get_attr: [host, name] }, 'db']]
      size: { get_param: volume_size }

  volume_6_attachment:
    type: OS::Cinder::VolumeAttachment
    depends_on: [ volume_6, host ]
    properties:
      volume_id: { get_resource: volume_6 }
      instance_uuid: { get_resource: host }

  volume_7:
    type: OS::Cinder::Volume
    properties:
      name: 
        list_join: [ '_', [{ get_attr: [host, name] }, 'db']]
      size: { get_param: volume_size }

  volume_7_attachment:
    type: OS::Cinder::VolumeAttachment
    depends_on: [ volume_7, host ]
    properties:
      volume_id: { get_resource: volume_7 }
      instance_uuid: { get_resource: host }

  volume_8:
    type: OS::Cinder::Volume
    properties:
      name: 
        list_join: [ '_', [{ get_attr: [host, name] }, 'db']]
      size: { get_param: volume_size }

  volume_8_attachment:
    type: OS::Cinder::VolumeAttachment
    depends_on: [ volume_8, host ]
    properties:
      volume_id: { get_resource: volume_8 }
      instance_uuid: { get_resource: host }

  volume_9:
    type: OS::Cinder::Volume
    properties:
      name: 
        list_join: [ '_', [{ get_attr: [host, name] }, 'db']]
      size: { get_param: volume_size }

  volume_9_attachment:
    type: OS::Cinder::VolumeAttachment
    depends_on: [ volume_9, host ]
    properties:
      volume_id: { get_resource: volume_9 }
      instance_uuid: { get_resource: host }

  volume_10:
    type: OS::Cinder::Volume
    properties:
      name: 
        list_join: [ '_', [{ get_attr: [host, name] }, 'db']]
      size: { get_param: volume_size }

  volume_10_attachment:
    type: OS::Cinder::VolumeAttachment
    depends_on: [ volume_10, host ]
    properties:
      volume_id: { get_resource: volume_10 }
      instance_uuid: { get_resource: host }

  allow_ssh:
    type: OS::Neutron::SecurityGroup
    properties:
      description: allow incoming SSH and ICMP traffic from anywhere.
      name: 
        list_join: [ '-', [ { get_param: "OS::stack_name" }, 'kickstart', 'allow incoming traffic, tcp port 22 and icmp']]
      rules: 
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, port_range_min: 22, port_range_max: 22, protocol: tcp } 
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, protocol: icmp } 

  port:
    type: OS::Neutron::Port
    depends_on: [ allow_ssh ]
    properties:
      network: { get_param: private_network }
      security_groups: [ get_resource: allow_ssh ]

  floating_ip:
    type: OS::Neutron::FloatingIP
    depends_on: [ port ]
    properties:
      floating_network: { get_param: public_network }
      port_id: { get_resource: port }
      